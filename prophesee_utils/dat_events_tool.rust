use std::fs::File;
use std::io::{Read, Seek, SeekFrom};
use std::time::SystemTime;
use std::path::Path;
use std::mem;
use byteorder::{LittleEndian, ReadBytesExt};
use ndarray::{Array, Array1, Array2, s};

const EV_TYPE: [(&str, &str); 2] = [("t", "u32"), ("_", "i32")];  // Event2D
const EV_STRING: &str = "Event2D";

fn load_td_data(filename: &str, ev_count: i32, ev_start: i32) -> Result<Array2<u32>, std::io::Error> {
    let mut f = File::open(filename)?;
    let (_, ev_type, ev_size, _) = parse_header(&mut f)?;
    if ev_start > 0 {
        f.seek(SeekFrom::Start((ev_start * ev_size) as u64))?;
    }

    let dtype = &EV_TYPE;
    let mut dat = vec![[0u32; 2]; ev_count as usize];
    f.read_exact(unsafe { 
        mem::transmute::<&mut [[u8; 8]], &mut [[u32; 2]]>(&mut dat)
    })?;
    let xyp = match dtype.iter().find(|&&(name, _)| name == "_") {
        Some(_) => {
            let x = dat.iter().map(|&[_, val]| val & 16383);
            let y = dat.iter().map(|&[_, val]| (val & 268419072) >> 14);
            let p = dat.iter().map(|&[_, val]| (val & 268435456) >> 28);
            (x.collect(), y.collect(), p.collect())
        },
        None => (vec![], vec![], vec![]),
    };
    Ok(_dat_transfer(dat, dtype, Some(xyp)))
}

fn _dat_transfer(dat: Vec<[u32; 2]>, dtype: &[(String, String)], xyp: Option<(Vec<u32>, Vec<u32>, Vec<u32>)>) -> Array2<u32> {
    let mut variables = vec![];
    let mut xyp_index = -1;
    for (i, (name, _)) in dtype.iter().enumerate() {
        if name == "_" {
            xyp_index = i as i32;
            continue;
        }
        variables.push((name.clone(), Array1::from(dat.iter().map(|&[_, val]| val).collect())));
    }
    let mut new_dat = Array2::zeros((dat.len(), variables.len()));
    if let Some((x, y, p)) = xyp {
        new_dat.slice_mut(s![.., xyp_index]).assign(&Array::from(x));
        new_dat.slice_mut(s![.., xyp_index+1]).assign(&Array::from(y));
        new_dat.slice_mut(s![.., xyp_index+2]).assign(&Array::from(p));
    }
    for (name, arr) in variables {
        new_dat.slice_mut(s![.., dtype.iter().position(|&(n, _)| n == name).unwrap() as i32]).assign(&arr);
    }
    new_dat
}

// Add rest of the functions similarly
